{"version":3,"sources":["components/Header/index.tsx","utils/firebase.ts","create/Create.tsx","detail/Detail.tsx","edit/Edit.tsx","list/List.tsx","utils/index.ts","Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","margin","marginBottom","Header","classes","AppBar","className","position","Toolbar","IconButton","edge","color","aria-label","Menu","Typography","variant","Button","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","REACT_APP_FIREBASE_PROJECT_ID","messagingSenderId","appId","measurementId","firebase","initializeApp","firestore","Create","useForm","register","handleSubmit","errors","useState","memo","setMemo","history","useHistory","Container","Grid","container","item","component","autoComplete","onSubmit","value","console","log","push","style","width","TextField","label","fullWidth","name","helperText","message","inputRef","required","maxLength","onChange","e","target","body","minLength","type","Box","my","to","Detail","state","useLocation","pathname","Edit","card","height","createButton","detailButton","textDecoration","List","memoList","useEffect","fetchMemoList","direction","Card","Add","fontSize","map","CardContent","id","Routes","basename","path","exact","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92a36ec7.chunk.js","sourcesContent":["import { AppBar, Toolbar, IconButton, Typography, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Menu } from '@material-ui/icons'\nimport React from 'react'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  margin: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\nconst Header: React.FC = () => {\n  const classes = useStyles()\n\n  return (\n    <AppBar className={classes.margin} position=\"static\">\n      <Toolbar>\n        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n          <Menu />\n        </IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n          MEMO帳\n        </Typography>\n        <Button color=\"inherit\">Login</Button>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Header\n","import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: `${process.env.REACT_APP_PROJECT_ID}.firebaseapp.com`,\n  databaseURL: `https://${process.env.REACT_APP_PROJECT_ID}.firebaseapp.com`,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: `${process.env.REACT_APP_FIREBASE_PROJECT_ID}.appspot.com`,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n}\n\nfirebase.initializeApp(firebaseConfig)\nexport default firebase\nexport const db = firebase.firestore()\n","import { Box, Grid, TextField, Typography } from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\nimport React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { Link, useHistory } from 'react-router-dom'\n\nimport Header from '../components/Header'\nimport { Memo } from '../types'\nimport { CreateMemo as createMemo } from '../utils'\n\nconst Create = () => {\n  const { register, handleSubmit, errors } = useForm()\n  const [memo, setMemo] = useState<Memo>()\n  const history = useHistory()\n\n  const onSubmit = (value) => {\n    console.log(value)\n    createMemo(memo)\n    history.push('/')\n  }\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item>\n            <Typography variant=\"h4\" component=\"h2\">\n              新規メモ追加\n            </Typography>\n          </Grid>\n          <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)} style={{ width: '100%' }}>\n            <Grid item>\n              <TextField\n                label=\"title\"\n                margin=\"dense\"\n                fullWidth\n                name=\"title\"\n                helperText={errors.title && errors.title.message}\n                inputRef={register({\n                  required: 'titleは入力必須です',\n                  maxLength: { value: 30, message: 'titleは30文字以内で入力してください。' },\n                })}\n                onChange={(e) => setMemo({ ...memo, title: e.target.value })}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"body\"\n                margin=\"dense\"\n                fullWidth\n                name=\"body\"\n                helperText={errors.body && errors.body.message}\n                inputRef={register({\n                  required: 'bodyは入力必須です',\n                  minLength: { value: 10, message: 'bodyは10文字以上で入力してください。' },\n                })}\n                onChange={(e) => setMemo({ ...memo, body: e.target.value })}\n              />\n            </Grid>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              保存\n            </Button>\n          </form>\n        </Grid>\n      </Container>\n      <Box my={2}>\n        <Link to=\"/\">\n          <Button type=\"button\">一覧ページに戻る</Button>\n        </Link>\n      </Box>\n    </>\n  )\n}\n\nexport default Create\n","import React from 'react'\nimport { Link, useLocation } from 'react-router-dom'\n\nimport Header from '../components/Header'\nimport { Memo } from '../types'\n\nconst Detail = () => {\n  const location = useLocation<Memo>()\n  const state = location.state\n\n  return (\n    <>\n      <Header />\n      <h1>詳細ページ</h1>\n      <table>\n        <tr>\n          <th>タイトル</th>\n          <td>{state.title}</td>\n        </tr>\n        <tr>\n          <th>本文</th>\n          <td>{state.body}</td>\n        </tr>\n      </table>\n      <Link to=\"/\">\n        <button type=\"button\">一覧ページに戻る</button>\n      </Link>\n      <button type=\"button\">削除</button>\n      <Link\n        to={{\n          pathname: '/edit',\n          state: state,\n        }}\n      >\n        <button type=\"button\">編集</button>\n      </Link>\n    </>\n  )\n}\n\nexport default Detail\n","import { Box, Grid, TextField, Typography } from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\nimport React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { Link, useHistory, useLocation } from 'react-router-dom'\n\nimport Header from '../components/Header'\nimport { Memo } from '../types'\nimport { UpdateMemo as updateMemo } from '../utils'\n\nconst Edit: React.FC = () => {\n  const { register, handleSubmit, errors } = useForm()\n  const history = useHistory()\n  const { state } = useLocation<Memo>()\n\n  const [memo, setMemo] = useState<Memo>(state)\n\n  const onSubmit = () => {\n    console.log(memo)\n    updateMemo(memo)\n    history.push({\n      pathname: '/detail',\n      state: memo,\n    })\n  }\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item>\n            <Typography variant=\"h4\" component=\"h2\">\n              メモ編集\n            </Typography>\n          </Grid>\n          <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)} style={{ width: '100%' }}>\n            <Grid item>\n              <TextField\n                label=\"title\"\n                margin=\"dense\"\n                fullWidth\n                name=\"title\"\n                helperText={errors.title && errors.title.message}\n                value={memo.title}\n                inputRef={register({\n                  required: 'titleは入力必須です',\n                  maxLength: { value: 30, message: 'titleは30文字以内で入力してください。' },\n                })}\n                onChange={(e) => setMemo({ ...memo, title: e.target.value })}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"body\"\n                margin=\"dense\"\n                fullWidth\n                name=\"body\"\n                helperText={errors.body && errors.body.message}\n                value={memo.body}\n                inputRef={register({\n                  required: 'bodyは入力必須です',\n                  minLength: { value: 10, message: 'bodyは10文字以上で入力してください。' },\n                })}\n                onChange={(e) => setMemo({ ...memo, body: e.target.value })}\n              />\n            </Grid>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              保存\n            </Button>\n          </form>\n        </Grid>\n      </Container>\n      <Box my={2}>\n        <Link to=\"/\">\n          <Button type=\"button\">一覧ページに戻る</Button>\n        </Link>\n      </Box>\n    </>\n  )\n}\n\nexport default Edit\n","import { Button, Grid, Card, CardContent, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Add } from '@material-ui/icons'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport Header from '../components/Header'\nimport { FetchMemoList as fetchMemoList } from '../utils'\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    height: 180,\n    width: 180,\n  },\n  createButton: {\n    height: '100%',\n    width: '100%',\n  },\n  detailButton: {\n    height: '100%',\n    width: '100%',\n    '& a': {\n      textDecoration: 'none',\n      color: 'inherit',\n    },\n  },\n}))\n\nconst List = () => {\n  const classes = useStyles()\n  const memoList = fetchMemoList()\n\n  return (\n    <div className=\"List\">\n      <Header />\n      <Grid container direction=\"row\" spacing={3}>\n        <Grid item spacing={3}>\n          <Card className={classes.card}>\n            <Button className={classes.createButton}>\n              <Link to=\"/create\">\n                <Add fontSize=\"large\" />\n              </Link>\n            </Button>\n          </Card>\n        </Grid>\n        {memoList.map((memo) => (\n          <Grid item spacing={3} key={memo.id}>\n            <Card className={classes.card}>\n              <Button className={classes.detailButton}>\n                <Link\n                  to={{\n                    pathname: '/detail',\n                    state: memo,\n                  }}\n                >\n                  <CardContent>\n                    <Typography variant=\"h6\" component=\"h2\">\n                      {memo.title}\n                    </Typography>\n                    <Typography>{memo.body}</Typography>\n                  </CardContent>\n                </Link>\n              </Button>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  )\n}\n\nexport default List\n","import axios from 'axios'\nimport { useState, useEffect } from 'react'\n\nimport { Memo } from '../types'\n\nimport firebase, { db } from './firebase'\n\n// メモの全件取得\nexport const FetchMemoList = (): Memo[] => {\n  const [memoList, setMemoList] = useState<Memo[]>([])\n  const fetchData = () => {\n    if (process.env.REACT_APP_ENVIRONMENT === 'local') {\n      // local用処理\n      axios\n        .get(process.env.REACT_APP_LOCAL_DB_URL)\n        .then((res) => {\n          setMemoList(res.data)\n          console.log(`fetching ${res.data.length} memo data.`)\n        })\n        .catch((e) => {\n          console.error(e)\n        })\n    } else if (process.env.REACT_APP_ENVIRONMENT === 'production') {\n      // 本番用処理\n      db.collection('memos')\n        .orderBy('createdAt', 'desc')\n        .get()\n        .then((snapshots) => {\n          setMemoList(snapshots.docs.map((doc) => doc.data() as Memo))\n          console.log(`fetching ${snapshots.docs.length} memo data.`)\n        })\n        .catch((e) => {\n          console.error(e)\n        })\n    }\n  }\n\n  // マウント時とアンマウント時に実行させる\n  useEffect(() => fetchData(), [])\n  return memoList\n}\n// 参考 : https://qiita.com/Sotq_17/items/9a3e083d12a52afed6cd\n\n// メモの更新\nexport const UpdateMemo = (memo: Memo) => {\n  if (process.env.REACT_APP_ENVIRONMENT === 'local') {\n    // local機能\n    const configs = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n    axios\n      .put(\n        `${process.env.REACT_APP_LOCAL_DB_URL}/${memo.id}`,\n        {\n          title: memo.title,\n          body: memo.body,\n        },\n        configs\n      )\n      .catch((e) => {\n        console.error(e)\n      })\n  } else if (process.env.REACT_APP_ENVIRONMENT === 'production') {\n    // 本番用処理\n    db.collection('memos')\n      .doc(memo.id)\n      .set({\n        title: memo.title,\n        body: memo.body,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log('Document written with ID: ', memo.id)\n      })\n      .catch((e) => {\n        console.error(e)\n      })\n  }\n}\n\n// メモの新規追加\nexport const CreateMemo = (memo: Memo) => {\n  if (process.env.REACT_APP_ENVIRONMENT === 'local') {\n    // local用処理\n    const configs = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n    axios\n      .post(\n        process.env.REACT_APP_LOCAL_DB_URL,\n        {\n          title: memo.title,\n          body: memo.body,\n        },\n        configs\n      )\n      .catch((e) => {\n        console.error(e)\n      })\n  } else if (process.env.REACT_APP_ENVIRONMENT === 'production') {\n    // 本番用処理\n    db.collection('memos')\n      .add({\n        title: memo.title,\n        body: memo.body,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then((docRef) => {\n        console.log('Document written with ID: ', docRef.id)\n      })\n      .catch((e) => {\n        console.error(e)\n      })\n  }\n}\n","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\n// screens\nimport Create from './create/Create'\nimport Detail from './detail/Detail'\nimport Edit from './edit/Edit'\nimport List from './list/List'\n\nconst Routes = () => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div>\n        <Route path=\"/\" exact component={List} />\n        <Route path=\"/create\" component={Create} />\n        <Route path=\"/detail\" component={Detail} />\n        <Route path=\"/edit\" component={Edit} />\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default Routes\n","import { Container, makeStyles } from '@material-ui/core'\nimport React from 'react'\n\nimport Routes from './Routes'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    margin: '20px 0',\n  },\n}))\n\nfunction App() {\n  const classes = useStyles()\n  return (\n    <Container className={classes.root}>\n      <Routes />\n    </Container>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}